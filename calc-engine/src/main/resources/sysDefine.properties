################################################# storm 集群配置 ############################################
# 扩展集群按照以下参数的倍数扩展可以达到效率最高

# storm worker 数量, 请配置成与集群 supervisor 工作节点数量一致.
storm.worker.no=2

# storm worker 每个最大占用内存
storm.worker.heap.memory.mb=5440

# spout 并行度基准系数
storm.kafka.spout.no=1
# bolt 并行度基准系数
storm.worker.bolt.no=2

# 拓扑逻辑名称
topology.name=calc-engine
# 拓扑逻辑版本
topology.version=major.minor.patch
################################################# kafka 配置 ############################################

# kafka 依赖的 zookeeper 集群, 只有使用 kafka 0.8.2 的 compatibility 版本才使用.
kafka.zookeeper.servers=192.168.1.100,192.168.1.101,192.168.1.102

# kafka 依赖的 zookeeper 端口, 只有使用 kafka 0.8.2 的 compatibility 版本才使用.
kafka.zookeeper.port=2181

# kafka 元数据存储在 zookeeper 的路径, 只有使用 kafka 0.8.2 的 compatibility 版本才使用.
kafka.zookeeper.path=/stormcal

# kafka 经纪人及监听的端口, 多个经纪人之间用英文逗号隔开.
kafka.bootstrap.servers=192.168.1.101:9092,192.168.1.102:9092

################################################# kafka 输入 ############################################

# 车辆实时数据 topic, 依赖上游前置机, 请保持一致.
kafka.consumer.vehicle_realtime_data.topic=us_general
kafka.consumer.vehicle_realtime_data.group=realinfo

################################################# kafka 输出 ############################################

# 车辆报警 topic, 下游AlarmService依赖, 请保持一致.
kafka.producer.vehicle_alarm.topic=SYNC_REALTIME_ALARM

# 围栏告警, 下游AlarmService依赖, 请保持一致.
kafka.producer.vehicle_fence_alarm.topic=FENCE_ALARM_TOPIC

# 车辆通知 topic, 下游AlarmService依赖, 请保持一致.
kafka.producer.vehicle_notice.topic=notice_topic

################################################# REDIS ############################################
# redis 连接地址
redis.host=192.168.1.104
# redis 端口
redis.port=6379
# redis 密码
redis.pass=

# redis 最大连接数
redis.maxActive=1000
# redis 最大空闲数
redis.maxIdle=100
# redis 最长等待时间(毫秒)
redis.maxWait=300000
# redis 超时时间(毫秒)
redis.timeOut=300000

# 获取 redis 预处理、预警间隔时间(毫秒)
redis.timeInterval=300
# 定时更新redis间隔时间(毫秒)
redis.listenInterval=300
#
redis.totalInterval=180

################################################# CTFO ############################################
# 分布式 redis 地址
ctfo.cacheHost=192.168.1.104
# 分布式 redis 端口
ctfo.cachePort=6379
# 分布式 redis 库名称
ctfo.cacheDB=xny
# 分布式 redis 表名
ctfo.cacheTable=realInfo

################################################# 关系数据库配置 ############################################
# MySQL
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://192.168.1.103:3306/evsmc?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
jdbc.username=root
jdbc.password=123456
# 查询数据库间隔
db.cache.flushtime=360

################################################# 通信超时配置 ############################################
# 多长时间算是离线, 单位秒.
redis.offline.time=600
# 多长时间算是停止, 单位秒
redis.offline.stoptime=180

################################################# 大屏展示配置 ############################################
# 多长时间保存一次数据到 redis, 单位秒
redis.monitor.time=600
# 统计数据的线程池大小
stat.thread.no=30

################################################# 电子围栏配置 ############################################
# 经纬度坐标系中距离为1的两个坐标间近似距离
fence.coordinate.coefficient=104708.1
# 电子围栏图形外部缓冲区
fence.shape.buffer.outside.meter=50
# 电子围栏图形内部缓冲区
fence.shape.buffer.inside.meter=50
# 电子围栏定位最大距离差
fence.coordinate.distance.max.meter=1000

# 触发电子围栏事件开始需要的连续次数 - 驶入事件
fence.event.drive.inside.start.trigger.continue.count=2
# 触发电子围栏事件开始需要的持续时长 - 驶入事件
fence.event.drive.inside.start.trigger.timeout.millisecond=0
# 触发电子围栏事件结束需要的连续次数 - 驶入事件
fence.event.drive.inside.stop.trigger.continue.count=2
# 触发电子围栏事件结束需要的持续时长 - 驶入事件
fence.event.drive.inside.stop.trigger.timeout.millisecond=0

# 触发电子围栏事件开始需要的连续次数 - 驶离事件
fence.event.drive.outside.start.trigger.continue.count=2
# 触发电子围栏事件开始需要的持续时长 - 驶离事件
fence.event.drive.outside.start.trigger.timeout.millisecond=0
# 触发电子围栏事件结束需要的连续次数 - 驶离事件
fence.event.drive.outside.stop.trigger.continue.count=2
# 触发电子围栏事件结束需要的持续时长 - 驶离事件
fence.event.drive.outside.stop.trigger.timeout.millisecond=0

################################################# 企业通知配置 ############################################

# CarNoticelBolt, 如果配置为2, 则进行一次全量数据扫描, 并将告警数据发送到kafka
redis.cluster.data.syn=1
# CarNoticelBolt, 多长时间检查一下是否离线
redis.offline.checktime=90

# 触发平台报警开始需要的连续次数
alarm.start.trigger.continue.count=3
# 触发平台报警开始需要的持续时长
alarm.start.trigger.timeout.millisecond=30000
# 触发平台报警结束需要的连续次数
alarm.stop.trigger.continue.count=3
# 触发平台报警结束需要的持续时长
alarm.stop.trigger.timeout.millisecond=30000

# 是否启用点火熄火通知
sys.ignite.rule=0
# 是否启用异常用车通知
sys.abnormal.rule=0
# 是否开启飞机的通知信息
sys.fly.rule=0
# 是否开启上下线通知
sys.onoff.rule=1
# 是否开启连续里程跳变通知
sys.milehop.rule=1
# 是否启用车辆锁止变化通知
sys.carlockstatus.rule=1

# 长期离线车辆判定时长
vehicle.idle.timeout.millisecond=86400000

# 是否启用CAN监测通知
sys.can.rule=1
# 触发CAN故障需要的连续帧数
notice.can.fault.trigger.continue.count=7
# 触发CAN故障需要的持续时长
notice.can.fault.trigger.timeout.millisecond=30000
# 触发CAN正常需要的连续帧数
notice.can.normal.trigger.continue.count=3
# 触发CAN正常需要的持续时长
notice.can.normal.trigger.timeout.millisecond=30000

# 是否启用时间异常通知
notice.time.enable=true
# 时间数值异常范围
notice.time.range.abs.millisecond=600000


# 是否启用soc过低通知
notice.soc.low.enable=true
# soc过低开始通知触发器, 小于等于阈值
notice.soc.low.begin.trigger.threshold=10
# soc过低开始通知触发器, 连续帧数
notice.soc.low.begin.trigger.continue.count=3
# soc过低开始通知触发器, 持续时长
notice.soc.low.begin.trigger.timeout.millisecond=30000
# soc过低结束通知触发器, 大于阈值
notice.soc.low.end.trigger.threshold=10
# soc过低结束通知触发器, 连续帧数
notice.soc.low.end.trigger.continue.count=1
# soc过低结束通知触发器, 持续时长
notice.soc.low.end.trigger.timeout.millisecond=0

# 是否启用soc过高通知
notice.soc.high.enable=true
# soc过高开始通知触发器, 大于等于阈值
notice.soc.high.begin.trigger.threshold=90
# soc过高开始通知触发器, 连续帧数
notice.soc.high.begin.trigger.continue.count=3
# soc过高开始通知触发器, 持续时长
notice.soc.high.begin.trigger.timeout.millisecond=30000
# soc过高结束通知触发器, 小于阈值
notice.soc.high.end.trigger.threshold=80
# soc过高结束通知触发器, 连续帧数
notice.soc.high.end.trigger.continue.count=1
# soc过高结束通知触发器, 持续时长
notice.soc.high.end.trigger.timeout.millisecond=0


# 是否启用未定位通知
sys.gps.rule=1
# 触发定位故障需要的连续帧数
gps.novalue.continue.no=5
# 触发定位正常需要的连续帧数
gps.hasvalue.continue.no=10
# 触发定位故障需要的持续时长(秒)
gps.judge.time=60


#里程跳变数，单位是km, 2表示2公里
mile.hop.num=2
